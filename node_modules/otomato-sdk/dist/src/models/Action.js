import { Node } from './Node.js';
import { ACTIONS } from '../constants/Blocks.js';
import { typeIsNumber } from '../utils/typeValidator.js';
export class Action extends Node {
    constructor(action) {
        super({
            ...action,
            class: 'action',
            parentInfo: findActionByBlockId(action.blockId).parentInfo,
            frontendHelpers: action.frontendHelpers || {}
        });
    }
    static async fromJSON(json) {
        const enriched = findActionByBlockId(json.blockId);
        const action = new Action({
            ...enriched.block,
            ref: json.ref,
            position: json.position,
            parentInfo: enriched.parentInfo,
            state: json.state,
        });
        for (const [key, value] of Object.entries(json.parameters)) {
            if (value === undefined || value === null) {
                continue;
            }
            switch (key) {
                case 'chainId':
                    action.setChainId(value);
                    break;
                case 'contractAddress':
                    action.setContractAddress(value);
                    break;
                case 'abi':
                    const abiParameters = value.parameters;
                    for (const abiKey in abiParameters) {
                        const enrichedParameter = enriched.block.parameters.find((param) => param.key === `abiParams.${abiKey}`);
                        const paramType = enrichedParameter ? enrichedParameter.type : null;
                        if (abiParameters[abiKey] === undefined || abiParameters[abiKey] === null || paramType === null)
                            continue;
                        if (typeIsNumber(paramType) && typeof abiParameters[abiKey] === 'string' && abiParameters[abiKey].endsWith('n')) {
                            action.setParams(abiKey, BigInt(abiParameters[abiKey].slice(0, -1)));
                        }
                        else {
                            action.setParams(abiKey, abiParameters[abiKey]);
                        }
                    }
                    break;
                default:
                    action.setParams(key, value);
                    break;
            }
        }
        action.setId(json.id);
        return action;
    }
}
export const findActionByBlockId = (blockId) => {
    for (const category in ACTIONS) {
        for (const service in ACTIONS[category]) {
            for (const actionKey in ACTIONS[category][service]) {
                if (ACTIONS[category][service][actionKey].blockId === blockId) {
                    return {
                        parentInfo: {
                            name: service,
                            description: ACTIONS[category][service].description,
                            image: ACTIONS[category][service].image,
                            functionName: actionKey
                        },
                        block: ACTIONS[category][service][actionKey],
                    };
                }
            }
        }
    }
    throw new Error(`Action with id ${blockId} not found`);
};
