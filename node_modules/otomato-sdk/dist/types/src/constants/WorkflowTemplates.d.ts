import { Workflow } from '../index.js';
export declare const WORKFLOW_TEMPLATES_TAGS: {
    IEXEC: string;
    NFTS: string;
    SOCIALS: string;
    TRADING: string;
    ON_CHAIN_MONITORING: string;
    YIELD: string;
    NOTIFICATIONS: string;
    ABSTRACT: string;
    DEXES: string;
    LENDING: string;
};
/**
 * Default workflow loop settings for various workflow types.
 */
export declare const DEFAULT_WORKFLOW_LOOP_SETTINGS: {
    readonly subscription: {
        readonly loopingType: "subscription";
        readonly limit: 1000;
        readonly timeout: number;
    };
    readonly polling5s: {
        readonly loopingType: "polling";
        readonly period: 5000;
        readonly limit: 100;
    };
    readonly polling1h: {
        readonly loopingType: "polling";
        readonly period: number;
        readonly limit: 100;
    };
    readonly polling4h: {
        readonly loopingType: "polling";
        readonly period: number;
        readonly limit: 100;
    };
    readonly polling1d: {
        readonly loopingType: "polling";
        readonly period: number;
        readonly limit: 100;
    };
    readonly polling12h: {
        readonly loopingType: "polling";
        readonly period: number;
        readonly limit: 100;
    };
    readonly polling3d: {
        readonly loopingType: "polling";
        readonly period: number;
        readonly limit: 100;
    };
    readonly polling7d: {
        readonly loopingType: "polling";
        readonly period: number;
        readonly limit: 100;
    };
    readonly subscription1m20rep: {
        readonly loopingType: "subscription";
        readonly limit: 20;
        readonly timeout: number;
    };
    readonly subscription1m30rep: {
        readonly loopingType: "subscription";
        readonly limit: 30;
        readonly timeout: number;
    };
};
export declare const WORKFLOW_TEMPLATES: ({
    id: number;
    name: string;
    description: string;
    tags: string[];
    thumbnail: string;
    image: string[];
    blockIDs: number[];
    createWorkflow: () => Workflow;
} | {
    id: number;
    name: string;
    description: string;
    tags: string[];
    thumbnail: string;
    image: string[];
    blockIDs: number[];
    createWorkflow: () => Promise<Workflow>;
} | {
    hasSpecialInterval: boolean;
    id: number;
    name: string;
    description: string;
    tags: string[];
    thumbnail: string;
    image: string[];
    blockIDs: number[];
    createWorkflow: () => Workflow;
} | {
    hasSpecialInterval: boolean;
    id: number;
    name: string;
    description: string;
    tags: string[];
    thumbnail: string;
    image: string[];
    blockIDs: number[];
    createWorkflow: () => Promise<Workflow>;
})[];
