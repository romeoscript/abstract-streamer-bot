import { Parameter } from './Parameter.js';
export interface Position {
    x: number;
    y: number;
}
export interface ParentInfo {
    name: string;
    description: string;
    image: string;
    functionName?: string;
}
export type NodeState = 'inactive' | 'active' | 'failed' | 'completed';
export declare abstract class Node {
    id: string | null;
    blockId: number;
    name: string;
    description: string;
    parameters: {
        [key: string]: Parameter;
    };
    outputs: {
        [key: string]: string;
    };
    keyMap: {
        [key: string]: string;
    };
    position?: Position;
    ref: string;
    class: string;
    image: string;
    parentInfo?: ParentInfo;
    state: NodeState;
    isOptional: boolean | null;
    frontendHelpers: Record<string, any>;
    constructor(node: {
        blockId: number;
        name: string;
        description: string;
        parameters: Parameter[];
        output?: {
            [key: string]: string;
        };
        ref?: string;
        position?: Position;
        class: string;
        image: string;
        parentInfo?: ParentInfo;
        state?: NodeState;
        frontendHelpers?: Record<string, any>;
        isOptional?: boolean;
    });
    setId(id: string): void;
    setChainId(value: number): void;
    setContractAddress(value: string): void;
    setParams(key: string, value: any): void;
    setPosition(x: number, y: number): void;
    getRef(): string;
    setRef(ref: string): void;
    setIsOptional(isOptional: boolean): void;
    getParentInfo(): ParentInfo | undefined;
    getState(): NodeState;
    protected setParameter(key: string, value: any): void;
    getParameter(key: string): any;
    getParameters(): {
        [key: string]: any;
    };
    getOutputs(): {
        [key: string]: string;
    };
    getOutputVariableName(outputKey: string): string;
    getParameterVariableName(parameterKey: string): string;
    toJSON(): {
        [key: string]: any;
    };
    delete(): Promise<{
        success: boolean;
        error?: string;
    }>;
    update(): Promise<{
        success: boolean;
        error?: string;
    }>;
    private getSimplifiedKey;
    static fromJSON(json: {
        [key: string]: any;
    }): Promise<Node>;
}
