import { Node, ParentInfo, Position, NodeState } from './Node.js';
import { Parameter } from './Parameter.js';
export declare class Trigger extends Node {
    type: number;
    constructor(trigger: {
        blockId: number;
        name: string;
        description: string;
        type: number;
        parameters: Parameter[];
        output?: {
            [key: string]: string;
        };
        image: string;
        ref?: string;
        position?: Position;
        parentInfo?: ParentInfo;
        state?: NodeState;
        frontendHelpers?: Record<string, any>;
    });
    private notAPollingTrigger;
    setCondition(value: string): void;
    setComparisonValue(value: number | string): void;
    static fromJSON(json: {
        [key: string]: any;
    }): Promise<Trigger>;
}
export declare const findTriggerByBlockId: (blockId: number) => {
    parentInfo: ParentInfo;
    block: any;
};
/**
 * Searches through the TRIGGERS object to find a sub-object
 * whose `prototype` property matches `prototypeToMatch`.
 *
 * @param prototypeToMatch - The prototype string to find (e.g. "priceMovementAgainstCurrency").
 * @returns An object of shape { [blockKey]: any } if found, otherwise null.
 */
export declare function findBlockByPrototype(prototypeToMatch: string): {
    [blockKey: string]: any;
} | null;
