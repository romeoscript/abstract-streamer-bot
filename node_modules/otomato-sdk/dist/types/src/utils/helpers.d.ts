import { ethers } from 'ethers';
export declare function convertToTokenUnits(amount: number, chainId: number, contractAddress: string): Promise<ethers.BigNumberish>;
export declare function convertToTokenUnitsFromSymbol(amount: number, chainId: number, symbol: string): Promise<ethers.BigNumberish>;
export declare function convertToTokenUnitsFromDecimals(amount: number, decimals: number): Promise<ethers.BigNumberish>;
export declare function convertTokenUnitsFromSymbol(amount: bigint, chainId: number, symbol: string): Promise<number>;
export declare function convertTokenUnitsFromAddress(amount: bigint, chainId: number, contractAddress: string): Promise<number>;
export declare function convertTokenUnitsFromDecimals(amount: bigint, decimals: number): Promise<number>;
/**
 * Compares two Ethereum addresses after normalizing them to lowercase.
 * @param address1 - The first Ethereum address to compare.
 * @param address2 - The second Ethereum address to compare.
 * @returns boolean - True if the addresses are equal, false otherwise.
 */
export declare function compareAddresses(address1: string, address2: string): boolean;
/**
 * Generates a formula string for dynamically computing the ERC20 amount in the workflow,
 * based on the amount, chain ID, and contract address.
 * If the contract address is valid, it will be wrapped in double quotes.
 * If the amount is a numeric string, it will also be wrapped in double quotes.
 * @param amount - The amount of the ERC20 token to compute.
 * @param chainId - The ID of the blockchain network.
 * @param contractAddress - The contract address of the ERC20 token.
 * @returns string - A formatted string to be used as a variable in the workflow.
 */
export declare function getComputeERC20Variable(amount: string, chainId: any, contractAddress: string): string;
/**
 * Formats a number to a string with a specified number of non-zero decimal digits.
 * If the number is less than 1 and starts with zeros after the decimal point,
 * it will show decimals until the first N non-zero digits are reached.
 * Otherwise, it will show up to N decimal digits.
 *
 * @param value - The number to format.
 * @param nonZeroDecimals - The number of non-zero decimal digits to show (default is 2).
 * @returns string - The formatted number as a string.
 */
export declare function formatNonZeroDecimals(value: number, nonZeroDecimals?: number): string;
export declare const getTokenPrice: (chainId: number, contractAddress: string) => Promise<number>;
export declare const getETHAlternativeTokensSymbols: () => {
    1: string;
    130: string;
    324: string;
    8453: string;
    5000: string;
    137: string;
    10: string;
    34443: string;
    43114: string;
    59144: string;
    534352: string;
    42161: string;
    146: string;
    56: string;
    250: string;
    252: string;
};
/**
 * Formats a period in seconds into a human-readable string with days, hours, minutes, and seconds.
 * @param {number} seconds
 * @returns {string}
 */
export declare const formatPeriod: (seconds: number) => string;
export declare const formatMilliSecondsToHumanReadable: (milliseconds: number) => string;
/**
 * Converts a millisecond timestamp to a human-readable date string in the user's local timezone.
 * If the input is not a valid number, returns an empty string.
 * @param {number|string} milliseconds - The timestamp in milliseconds.
 * @returns {string} - The formatted date string in the user's local timezone.
 */
export declare const formatMillisecondsToLocalDate: (milliseconds: number | string) => string;
export declare const getChainIconUrl: (chainId: number) => string;
export declare const getChainById: (chainId: number) => {
    name: string;
    chainIcon: string;
};
/**
 * Returns HTML for a token display with a smaller font size.
 * @param chainId - The chain ID.
 * @param tokenAddress - The token address.
 * @returns HTML string for the token.
 */
export declare const getTokenHTML: (chainId: number, tokenAddress: string) => Promise<string>;
/**
 * Returns HTML for a chain display with a smaller font size.
 * @param chainId - The chain ID.
 * @returns HTML string for the chain.
 */
export declare const getChainHTML: (chainId: number) => string;
/**
 * Wraps dynamic name elements in a styled container with a smaller font size.
 * @param elements - HTML elements to wrap.
 * @returns HTML string for the wrapper.
 */
/**
 * Wraps dynamic name elements in a styled container with a smaller font size.
 * Handles nodeMap references by converting them to HTML links.
 * @param elements - HTML elements or nodeMap references to wrap.
 * @returns HTML string for the wrapper.
 */
export declare const getDynamicNameWrapperHTML: (...elements: string[]) => string;
export declare const shortenAddress: (address: string) => string;
/**
 * Maps a logic operator in text form to its corresponding symbol.
 * For example, "eq" -> "=", "lt" -> "<", etc.
 * @param operator - The logic operator as text.
 * @returns The corresponding symbol as a string, or the original operator if not found.
 */
export declare const mapTextToLogicOperator: (operator: string) => string;
/**
 * Returns a formatted comparison string using the logic operator and comparison value.
 * If the comparison value is a history reference, returns 'changes'.
 * @param condition - The logic operator as text.
 * @param comparisonValue - The value to compare to.
 * @returns The formatted comparison string or 'changes' if referencing history.
 */
export declare const getComparisonString: (condition: string, comparisonValue: string) => string;
/**
 * Finds the new elements in an array compared to an old array.
 * @param oldArray - The old array.
 * @param newArray - The new array.
 * @returns The new elements.
 */
export declare const findNewElements: (oldArray: string[], newArray: string[]) => string[];
export declare const createEthersContract: (chainId: number, contractAddress: string, abi: any[], rpcUrl?: string) => ethers.Contract;
export declare const jsonStringifyCircularObject: (obj: any) => Promise<void>;
